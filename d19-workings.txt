#ip 3
    addi 3 16 3     # r[3] = r[3] + 16 => jmp a
b:
    seti 1 5 2      # r[2] = 1
h:
    seti 1 5 4      # r[4] = 1
f:
    mulr 2 4 1      # r[1] = r[2] * r[4]    => r[1] = 1,2,3,4,5...
    eqrr 1 5 1      # r[1] = r[1] == r[5]   => 0 (until r[1] == r[5], which will take a very long time when r[5] is huge)
    addr 1 3 3      # r[3] = r[1] + r[3]    => if r[1] == r[5] then jmp c (if r[2] * r[4] == r[5], i.e. they are factors)
    addi 3 1 3      # r[3] = r[3] + 1       => jmp d
c:
    addr 2 0 0      # r[0] = r[2] + r[0]    => increment r[0] by r[2] (initially this is by 1) (!!! sum of all the factors of r[5] !!!)
d:
    addi 4 1 4      # r[4] = r[4] + 1       => increment r[4]
    gtrr 4 5 1      # r[1] = r[4] > r[5]    => has r[4] exceeded r[5]?
    addr 3 1 3      # r[3] = r[3] + r[1]    => if r[4] > r[5] jmp e
    seti 2 7 3      # r[3] = 2              => else jmp f
e:
    addi 2 1 2      # r[2] += 1             => increment r[2]
    gtrr 2 5 1      # r[1] = r[2] > r[5]    =>
    addr 1 3 3      # r[3] = r[1] + r[3]    => if r[2] > r[5] jmp g
    seti 1 4 3      # r[3] = 1              => else jmp  h
g:
    mulr 3 3 3      # r[3] = 45             => halt
a:
    addi 5 2 5      # r[5] = r[5] + 2       => r[5] = 2 (assuming r[5] = 0)
    mulr 5 5 5      # r[5] = r[5] * r[5]    => r[5] *= 2    (r[5] = 4)
    mulr 3 5 5      # r[5] = r[3] * r[5]    => r[5] *= 19   (r[5] = 76)
    muli 5 11 5     # r[5] = r[5] * 11      => r[5] *= 11   (r[5] = 836)
    addi 1 3 1      # r[1] = r[1] + 3       => r[1] = 3 (assuming r[1] = 0)
    mulr 1 3 1      # r[1] = r[1] * 3       => r[1] *= 3    (r[1] = 9)
    addi 1 12 1     # r[1] = r[1] + 12      => r[1] += 12   (r[1] = 21)
    addr 5 1 5      # r[5] = r[5] + r[1]    => r[5] += 21   (r[5] = 857)
    addr 3 0 3      # r[3] = r[3] + r[0] (if r[0] is 0 this does nothing, when it is initialised to 1, it skips the next instr)
    seti 0 5 3          # (in this version, r[5] is 12059124 smaller)
    setr 3 4 1      # r[1] = r[3]           => r[1] = 28
    mulr 1 3 1      # r[1] = r[1] * r[3]    => r[1] *= 29   (r[1] = 812)
    addr 3 1 1      # r[1] = r[3] + r[1]    => r[1] += 30   (r[1] = 842)
    mulr 3 1 1      # r[1] = r[3] * r[1]    => r[1] *= 31   (r[1] = 26102)
    muli 1 14 1     # r[1] = r[1] * 14      => r[1] *= 14   (r[1] = 365428)
    mulr 1 3 1      # r[1] = r[1] * r[3]    => r[1] *= 33   (r[1] = 12059124)
    addr 5 1 5      # r[5] = r[5] + r[1]    => r[5] += 12059124 (r[5] = 12059981)
    seti 0 9 0      # r[0] = 0  (this reset r[0] to 0, not sure if this path will be called again)
    seti 0 4 3      # r[3] = 0              => jmp b
